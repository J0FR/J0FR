// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/ZIP.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class ZIP {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object A=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=6;
      A=$fix($opUnionY($opIntvlY('a','z'),GCollections.asSet(' ')));
      $line=8;
      Object zip=$fix(ZIP.createTransducer(A));
      $line=10;
      Utilities.test($cast(gold.structures.automaton.IAutomaton.class,zip));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"main",$line);
    }
  }
  public static ITransducer createTransducer(Object Alph) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=14;
      A=$fix(Alph);
      $line=15;
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object letra:GCollections.unmodifiableCollection($opUnionY(A,GCollections.asSet('$',' ')))) {
        int $v3=$int(0);
        int $v4=$int(4);
        for (int countWord=$v3; countWord<=$v4; countWord++) {
          int $v5=$int(0);
          int $v6=$int(3);
          for (int countStrings=$v5; countStrings<=$v6; countStrings++) {
            $v1.add(GCollections.asList(letra,countWord,countStrings));
          }
        }
      }
      Object Q=$fix($opUnionY($v1,GCollections.asSet("F","I","E")));
      $line=16;
      Object \u03A3=$fix($opUnionY(A,GCollections.asSet('$',' ')));
      $line=17;
      Object \u03A3_=$fix($opUnionY($opUnionY(A,$opIntvlY('0','4')),GCollections.asSet('$','#','*','@')));
      $line=18;
      Object q_0=$fix("I");
      $line=19;
      Object F=$fix(GCollections.asSet("F"));
      $line=20;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,\u03A3_,q_0,F,new GMethod(ZIP.class,"d"),new GMethod(ZIP.class,"g"),new GMethod(ZIP.class,"h")});
      if (true) break $try;
      $line=21;
      $rethrow(new RuntimeException("The function \"createTransducer(Alph:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"createTransducer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object d(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=24;
      if ($opEqualY(q,"F")) {
        $line=25;
        $result="F";
        if (true) break $try;
      }
      else {
        $line=26;
        if ($opEqualY(q,"E")) {
          $line=26;
          $result="E";
          if (true) break $try;
        }
        else {
          $line=27;
          if ($opEqualY(\u03C3,'$')) {
            $line=28;
            $result="F";
            if (true) break $try;
          }
          else {
            $line=30;
            $result=GCollections.asList(\u03C3,1,1);
            if (true) break $try;
          }
        }
      }
      $line=32;
      $rethrow(new RuntimeException("The function \"d(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"d",$line);
    }
    return $result;
  }
  public static Object d(java.lang.Iterable $v7, Object a) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v8=GCollections.unmodifiableCollection($v7).iterator();
      Object letra=$v8.next();
      Object countWord=$v8.next();
      Object countStrings=$v8.next();
      $line=36;
      if (($bool(($opEqualY(a,' ')||$opEqualY(a,'$')))&&$opEqualY(letra,' '))) {
        $line=36;
        $result="E";
        if (true) break $try;
      }
      else {
        $line=38;
        if ($opEqualY(a,'$')) {
          $line=38;
          $result="F";
          if (true) break $try;
        }
        else {
          $line=40;
          if ($opEqualY(letra,' ')) {
            $line=40;
            $result=GCollections.asList(a,1,1);
            if (true) break $try;
          }
          else {
            $line=42;
            if ($opEqualY(countWord,0)) {
              $line=42;
              $result=GCollections.asList(a,$opModulY($opAdditY(countWord,1),4),$opModulY($opAdditY(countStrings,1),3));
              if (true) break $try;
            }
            else {
              $line=44;
              $result=GCollections.asList(a,$opModulY($opAdditY(countWord,1),4),countStrings);
              if (true) break $try;
            }
          }
        }
      }
      $line=46;
      $rethrow(new RuntimeException("The function \"d(\u27E8letra,countWord,countStrings\u27E9:java.lang.Iterable,a:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"d",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=49;
      $result="";
      if (true) break $try;
      $line=50;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=53;
      $result=\u03C3;
      if (true) break $try;
      $line=54;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"h",$line);
    }
    return $result;
  }
  public static Object h(java.lang.Iterable $v9, Object a) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v10=GCollections.unmodifiableCollection($v9).iterator();
      Object letra=$v10.next();
      Object countWord=$v10.next();
      Object countStrings=$v10.next();
      $line=57;
      if ($opEqualY(a,'$')) {
        $line=58;
        if ($opEqualY(countWord,1)) {
          $line=58;
          $result=$opAdditY($opAdditY("###",$invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings})),'$');
          if (true) break $try;
        }
        else {
          $line=59;
          if ($opEqualY(countWord,2)) {
            $line=59;
            $result=$opAdditY($opAdditY("##",$invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings})),'$');
            if (true) break $try;
          }
          else {
            $line=60;
            if ($opEqualY(countWord,3)) {
              $line=60;
              $result=$opAdditY($opAdditY("#",$invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings})),'$');
              if (true) break $try;
            }
            else {
              $line=61;
              $result=$opAdditY($invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings}),'$');
              if (true) break $try;
            }
          }
        }
      }
      else {
        $line=64;
        if ($opEqualY(a,' ')) {
          $line=65;
          if ($opEqualY(countWord,3)) {
            $line=65;
            $result=$opAdditY($opAdditY("#",$invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings})),'*');
            if (true) break $try;
          }
          else {
            $line=66;
            if ($opEqualY(countWord,1)) {
              $line=66;
              $result=$opAdditY($opAdditY("###",$invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings})),'*');
              if (true) break $try;
            }
            else {
              $line=67;
              if ($opEqualY(countWord,2)) {
                $line=67;
                $result=$opAdditY($opAdditY("##",$invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings})),'*');
                if (true) break $try;
              }
              else {
                $line=68;
                $result=$opAdditY($invokeMethod(String.class,"valueOf",true,null,new Object[]{countStrings}),'*');
                if (true) break $try;
              }
            }
          }
        }
        else {
          $line=70;
          if (($opEqualY(countWord,0)&&!$opEqualY(letra,' '))) {
            $line=70;
            $result=$opAdditY('@',$invokeMethod(String.class,"valueOf",true,null,new Object[]{a}));
            if (true) break $try;
          }
          else {
            $line=72;
            $result=a;
            if (true) break $try;
          }
        }
      }
      $line=76;
      $rethrow(new RuntimeException("The function \"h(\u27E8letra,countWord,countStrings\u27E9:java.lang.Iterable,a:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"h",$line);
    }
    return $result;
  }
}
